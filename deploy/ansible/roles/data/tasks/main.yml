---

#####
## Tasks to configure and deploy containers for a data node
#####

- name: Make config directories
  file:
    path: /esg/config/{{ item }}
    state: directory
  loop: [fileserver, thredds]

- name: Create Docker network
  docker_network:
    name: esgf

- name: Configure data volumes
  set_fact:
    data_docker_mounts: >-
      [
        {% for mount in data.mounts %}
        "{{ mount.hostPath }}:{{ mount.mountPath }}:ro",
        {% endfor %}
      ]

- name: Configure THREDDS
  block:
    - name: Write THREDDS configuration
      template:
        src: catalog.xml.j2
        dest: /esg/config/thredds/catalog.xml

    - name: Set THREDDS image fact
      set_fact:
        thredds_image: "{{ image_defaults | combine(data.thredds.image) }}"

    - name: Start THREDDS container
      docker_container:
        name: thredds
        image: "{{ thredds_image.prefix }}/{{ thredds_image.repository }}:{{ thredds_image.tag }}"
        pull: "{{ thredds_image.pull }}"
        detach: yes
        restart_policy: on-failure
        exposed_ports:
          - "8080"
        networks:
          - name: esgf
        networks_cli_compatible: yes
        user: "{{ data.security_context.user }}"
        groups: "{{ data.security_context.groups }}"
        # Append the catalog volume to the data mounts
        volumes: "{{ ['/esg/config/thredds:/opt/tomcat/content/thredds/esgcet:ro'] + data_docker_mounts }}"
        state: started
        restart: yes
  when: "data.thredds.enabled | bool"

- name: Configure Nginx fileserver
  block:
    - name: Write fileserver configuration
      template:
        src: fileserver.conf.j2
        dest: /esg/config/fileserver/fileserver.conf

    - name: Set fileserver image fact
      set_fact:
        fileserver_image: "{{ image_defaults | combine(data.fileserver.image) }}"

    - name: Start fileserver container
      docker_container:
        name: fileserver
        image: "{{ fileserver_image.prefix }}/{{ fileserver_image.repository }}:{{ fileserver_image.tag }}"
        pull: "{{ fileserver_image.pull }}"
        detach: yes
        restart_policy: on-failure
        exposed_ports:
          - "8080"
        networks:
          - name: esgf
        networks_cli_compatible: yes
        user: "{{ data.security_context.user }}"
        groups: "{{ data.security_context.groups }}"
        # Append the Nginx config volume to the data mounts
        volumes: "{{ ['/esg/config/fileserver:/etc/nginx/conf.d:ro'] + data_docker_mounts }}"
        state: started
        restart: yes
  when: "data.fileserver.enabled | bool"
