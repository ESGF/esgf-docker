---

- name: Create Docker network
  docker_network:
    name: esgf

- name: Generate THREDDS catalogs
  block:
    - name: Make THREDDS config directory
      file:
        path: /esg/config/thredds
        state: directory

    - name: Write THREDDS catalog
      template:
        src: catalog.xml.j2
        dest: /esg/config/thredds/catalog.xml

    - name: Set thredds_catalog_host_path for generated catalogs
      set_fact:
        thredds_catalog_host_path: /esg/config/thredds
  when: thredds_catalog_host_path is not defined

- name: Create THREDDS cache volume
  docker_volume:
    name: thredds-cache

# If the access log exporter is enabled, we use a FIFO pipe for the THREDDS access log
# This will be followed by the exporter to get the access logs
# Unfortunately, in order to get the THREDDS container to pick this up we have to splat
# the whole logs directory, so we also need to set up the other logs as symlinks to stdout
- name: Set up THREDDS logs directory
  block:
    - name: Ensure THREDDS logs directory exists
      file:
        path: /esg/logs/thredds
        state: directory

    - name: Make links to stdout
      file:
        path: /esg/logs/thredds/{{ item }}
        state: link
        src: /dev/stdout
        force: yes
      loop:
        - serverStartup.log
        - catalogInit.log
        - httpout.log
        - featureCollectionScan.log
        - fmrc.log
        - threddsServlet.log
        - cache.log
        - localhost.log

    - name: Get stats of a file
      stat:
        path: /esg/logs/thredds/localhost_access_log.txt
      register: log_file

    - name: Delete log pipe from previous playbook versions
      file:
        path: /esg/logs/thredds/localhost_access_log.txt
        state: absent
      when: log_file.stat.isfifo

    - name: Ensure access log file exists
      file:
        path: /esg/logs/thredds/localhost_access_log.txt
        state: touch

    - name: Transfer ownership of logs to security context user
      file:
        path: /esg/logs/thredds
        recurse: yes
        owner: "{{ data_security_context_user }}"
  when: logstash_enabled | bool

- name: Start THREDDS container
  docker_container:
    name: thredds
    image: "{{ thredds_image_prefix }}/{{ thredds_image_repository }}:{{ thredds_image_tag }}"
    pull: "{{ thredds_image_pull }}"
    detach: yes
    restart_policy: unless-stopped
    exposed_ports:
      - "8080"
    networks:
      - name: esgf
    networks_cli_compatible: yes
    user: "{{ data_security_context_user }}"
    groups: "{{ data_security_context_groups }}"
    volumes: >-
      [
        # First the catalog volume
        "{{ thredds_catalog_host_path }}:/opt/tomcat/content/thredds/esgcet:ro",
        # Then the cache volume
        "thredds-cache:/opt/tomcat/content/thredds/cache:rw",
        # If logstash is enabled, mount the log directory
        {% if logstash_enabled %}
        "/esg/logs/thredds:/opt/tomcat/logs",
        {% endif %}
        # Then finally the data mounts
        {% for mount in data_mounts %}
        "{{ mount.host_path }}:{{ mount.mount_path }}:ro",
        {% endfor %}
      ]
    state: started
    recreate: yes
