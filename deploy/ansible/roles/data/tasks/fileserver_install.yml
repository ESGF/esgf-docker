---

- name: Create Docker network
  docker_network:
    name: esgf

- name: Make fileserver config directory
  file:
    path: /esg/config/fileserver
    state: directory

- name: Write fileserver configuration
  template:
    src: fileserver.conf.j2
    dest: /esg/config/fileserver/fileserver.conf

# If the access log exporter is enabled, we use a FIFO pipe for the Nginx access log
# This will be followed by the exporter to get the access logs
# Unfortunately, in order to get the container to pick this up we have to splat
# the whole logs directory, so we also need to set up the other logs as symlinks to stdout/err
- name: Set up fileserver logs directory
  block:
    - name: Ensure fileserver logs directory exists
      file:
        path: /esg/logs/fileserver
        state: directory

    - name: Link error log to stderr
      file:
        path: /esg/logs/fileserver/error.log
        state: link
        src: /dev/stderr
        force: yes

    - name: Get stats of a file
      stat:
        path: /esg/logs/fileserver/access.log
      register: log_file

    - name: Delete log pipe from previous playbook versions
      file:
        path: /esg/logs/fileserver/access.log
        state: absent
      when: log_file.stat.isfifo

    - name: Ensure access log file exists
      file:
        path: /esg/logs/fileserver/access.log
        state: touch

    - name: Transfer ownership of logs to security context user
      file:
        path: /esg/logs/fileserver
        recurse: yes
        owner: "{{ data_security_context_user }}"
  when: logstash_enabled | bool

- name: Start fileserver container
  docker_container:
    name: fileserver
    image: "{{ fileserver_image_prefix }}/{{ fileserver_image_repository }}:{{ fileserver_image_tag }}"
    pull: "{{ fileserver_image_pull }}"
    detach: yes
    restart_policy: unless-stopped
    exposed_ports:
      - "8080"
    networks:
      - name: esgf
    networks_cli_compatible: yes
    user: "{{ data_security_context_user }}"
    groups: "{{ data_security_context_groups }}"
    # Append the Nginx config volume to the data mounts
    # Append the catalog volume to the data mounts
    volumes: >-
      [
        "/esg/config/fileserver:/etc/nginx/conf.d:ro",
        # If logstash is enabled, mount the log directory
        {% if logstash_enabled %}
        "/esg/logs/fileserver:/var/log/nginx",
        {% endif %}
        # Then the data mounts
        {% for mount in data_mounts %}
        "{{ mount.host_path }}:{{ mount.mount_path }}:ro",
        {% endfor %}
      ]
    state: started
    recreate: yes
