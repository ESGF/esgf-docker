{% macro auth_check() -%}
        error_page 401 = @error401;
        auth_request /verify;
        auth_request_set $username $upstream_http_x_username;
        auth_request_set $sid $upstream_http_x_session;
{%- endmacro %}

# HTTP and HTTPS server blocks that proxy to the other containers running on this host
server {
    listen 8080 default_server;
    server_name _;

    return 301 https://$host$request_uri;
}

server {
    listen 8443 ssl http2 default_server;
    server_name  _;

    # Use the Docker embedded DNS server to allow us to resolve container names
    resolver 127.0.0.11 ipv6=off;

    ssl_certificate     /etc/nginx/tls/proxy.crt;
    ssl_certificate_key /etc/nginx/tls/proxy.key;
    ssl_trusted_certificate /etc/nginx/tls/proxy.crt;

    # Additional SSL configuration parameters to ensure secure connections
    include /etc/nginx/includes/ssl_params.conf;

    # By default, return 404
    location / {
        return 404;
    }

    {% if auth_enabled %}
    location /verify {
        set $query '';
        if ($request_uri ~* "[^\?]+\?(.*)$") {
            set $query $1;
        }

        proxy_pass http://auth:8080/verify/?next=$scheme://$http_host$http_port$request_uri;
        proxy_pass_request_body off;

        proxy_set_header Content-Length '0';
        proxy_set_header Host $host;
        proxy_set_header X-Origin-URI $request_uri;
        proxy_set_header X-Origin-Query $query;
        proxy_set_header X-Forwarded-Host $host;
    }

    location /login {
        proxy_pass http://auth:8080/login;
        proxy_pass_request_body off;

        proxy_set_header Content-Length '0';
        proxy_set_header Host $host;
        proxy_set_header X-Origin-URI $request_uri;
        proxy_set_header X-Origin-Query $query;
        proxy_set_header X-Forwarded-Host $host;
    }

    location @error401 {
        return 302 https://$host/login;
    }
    {% endif %}

    {% if 'data' in group_names %}
    {% if thredds_enabled %}
    location /thredds {
        include /etc/nginx/includes/proxy_params.conf;
        proxy_pass http://thredds:8080;

        {% if auth_enabled %}{{ auth_check() }}{% endif %}
    }
    {% endif %}

    {% if fileserver_enabled %}
    location /thredds/fileServer {
        include /etc/nginx/includes/proxy_params.conf;
        proxy_pass http://fileserver:8080;

        {% if auth_enabled %}{{ auth_check() }}{% endif %}
    }
    {% endif %}
    {% endif %}

    {% if 'index' in group_names %}
    {% if solr_enabled %}
    # We only want to permit access to the replication handler for each core from outside
    location ~ ^/solr/[a-z]+/replication {
        include /etc/nginx/includes/proxy_params.conf;
        proxy_pass http://solr-slave:8983;

        {% if auth_enabled %}{{ auth_check() }}{% endif %}
    }
    {% endif %}

    {% if search_enabled %}
    location /esg-search {
        include /etc/nginx/includes/proxy_params.conf;
        proxy_pass http://search:8080;

        {% if auth_enabled %}{{ auth_check() }}{% endif %}
    }
    {% endif %}
    {% endif %}
}
