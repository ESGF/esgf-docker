# The hostname for the deployment
hostname:

###
# Image defaults
###
# All image properties can be overridden on a per-service basis
image:
  # The image prefix to use
  # If using a private registry, change this, e.g. registry.ceda.ac.uk/esgfdeploy
  prefix: esgfdeploy
  # The tag to use
  tag: latest
  # Indicates whether images should be pulled every time a pod starts
  # When using mutable tags, like latest or branch names, this should be Always
  # When using immutable tags, like commit shas or release tags, this should be IfNotPresent
  pullPolicy: Always
  # A list of names of existing secrets providing Docker registry credentials
  # Required if using a private registry that requires authentication
  # See https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  pullSecrets:

# Extra labels to be applied to all resources
globalLabels: {}

###
# Ingress configuration
###
ingress:
  # The annotations for the ingress
  # Depending on your Kubernetes cluster, this can be used to configure things like Let's Encrypt certificates
  annotations: {}
  # Extra labels to apply to the ingress resources
  labels: {}
  # Sign-in URL for unauthenticated requests
  authSignin:
  # TLS configuration
  tls:
    # Either give the name of an existing TLS secret
    # See https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    secretName:
    # Or provide a PEM-encoded certificate (including chain) and key as variables
    pem:
      cert:
      key:
    # If neither are given, then a self-signed certificate is generated

###
# Auth service configuration
###
auth:
  # Indicates if the auth service should be deployed or not
  enabled: false
  # Image overrides for the auth service image
  image:
    repository: auth-service
  # The number of replicas for the auth service pod
  # If an hpa is configured, this is ignored - the hpa has full control over the number of replicas
  replicaCount: 1
  # The horizontal pod autoscaler configuration for auth service pods
  # See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  # Configuration is the same as for the thredds pod
  hpa: {}
  # The resource allocations for the auth service container
  # See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources: {}
  # Extra environment variables for the auth service container
  # See https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  extraEnv: []
  # Additional labels for auth service resources
  labels: {}
  # The node selector for the auth service pod
  # See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector:
  # The affinity rules for the auth service pod
  # See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity:
  # The tolerations for the auth service pod
  # See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations:
  # Runtime settings for the Django app
  runtimeSettings:
    MIDDLEWARE:
      - django.middleware.security.SecurityMiddleware
      - django.contrib.sessions.middleware.SessionMiddleware
      - django.middleware.common.CommonMiddleware
      - django.middleware.csrf.CsrfViewMiddleware
      - django.contrib.messages.middleware.MessageMiddleware
      - django.middleware.clickjacking.XFrameOptionsMiddleware
      - authenticate.oauth2.middleware.BearerTokenAuthenticationMiddleware
      - authenticate.oidc.middleware.OpenIDConnectAuthenticationMiddleware
      - authorize.opa.middleware.OPAAuthorizationMiddleware
    OPA_SERVER:
      # Host is defined in the settings template
      port: 8181
      package_path: esgf
      rule_name: allow
    RESOURCE_URI_QUERY_KEY: rd
    RESOURCE_URI_HEADER_KEY: HTTP_X_ORIGINAL_URL
    # Group info keys for authorization
    OAUTH2_GROUPS_KEY: group_membership
    OIDC_GROUPS_KEY: group_membership
    # OAuth Bearer Token auth settings
    OAUTH_CLIENT_ID:
    OAUTH_CLIENT_SECRET:
    OAUTH_TOKEN_URL:
    OAUTH_TOKEN_INTROSPECT_URL:
    # OIDC auth settings
    OIDC_BACKEND_CLIENT_NAME: esgf
    AUTHLIB_OAUTH_CLIENTS:
      esgf:
        client_id:
        client_secret:
        authorize_url:
        userinfo_endpoint:
        client_kwargs:
          scope: openid profile email
  # Security context for auth container.
  securityContext:
    # Run with a read-only root filesystem by default
    readOnlyRootFilesystem: true
    # The containers will run as the ESGF user by default
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

###
# OPA server configuration
###
opa:
  # Indicates if the OPA server should be deployed or not
  enabled: false
  # Image overrides for the opa image
  image:
    repository: opa
  # The number of replicas for the OPA server pod
  # If an hpa is configured, this is ignored - the hpa has full control over the number of replicas
  replicaCount: 1
  # The horizontal pod autoscaler configuration for OPA server pods
  # See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  # Configuration is the same as for the thredds pod
  hpa: {}
  # The resource allocations for the OPA server container
  # See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources: {}
  # Extra environment variables for the OPA server container
  # See https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  extraEnv: []
  # Additional labels for OPA server resources
  labels: {}
  # The node selector for the OPA server pod
  # See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector:
  # The affinity rules for the OPA server pod
  # See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity:
  # The tolerations for the OPA server pod
  # See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations:
  # Log level for the OPA server
  logLevel: info
  # Paths to restrict
  restrictedPaths: []
  # Security context for OPA container.
  securityContext:
    # Run with a read-only root filesystem by default
    readOnlyRootFilesystem: true
    # The containers will run as the ESGF user by default
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

###
# Data node configuration
###
data:
  # Indicates if the data node is to be enabled
  enabled: true

  # List of mounts required to serve data, as defined by the given datasets
  #
  # Each specified mount should include the following keys:
  #
  #   mountPath: The path to mount the volume inside the container
  #   volumeSpec: A Kubernetes volume specification - see https://kubernetes.io/docs/concepts/storage/volumes/
  #   mountOptions (optional): Additional options for the mount, e.g. mountPropagation for hostPath volumes
  #   name (optional): The name for the volume - if not given, this is derived from the mount path
  mounts: []
    # - name: datacentre   # This is actually the derived name that would be used anyway
    #   mountPath: /datacentre
    #   volumeSpec:
    #     hostPath:
    #       path: /datacentre
    #   mountOptions:
    #     mountPropagation: HostToContainer

  # List of datasets to expose
  # For each dataset, a THREDDS datasetScan element and an Nginx location are generated
  #
  # Each specified dataset should have the following keys:
  #
  #   name: The name of the dataset
  #   path: The URL path for the dataset
  #   location: The location of the dataset *inside the container* (see mounts above)
  #   filters (optional): A list of filter specifications for the datasetScan element
  datasets: []
    # e.g.
    # - name: CMIP5
    #   path: esg_dataroot
    #   location: /datacentre/archiveroots/archive/badc/cmip5/data

  # The pod and container security contexts for data serving pods
  # In particular, these may be required if using hostPath volumes for data, depending
  # on the permissions of that data
  # See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  # WARNING: Due to permissions set inside the container, the user *must* belong to group 1000
  #          in addition to the groups required to access data
  # By default, we run as the esgf user/group
  podSecurityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  securityContext:
    # Run with a read-only root filesystem by default
    readOnlyRootFilesystem: true
    # The containers will run as the ESGF user by default
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

  # Configuration for the access log sidecar
  accessLogSidecar:
    enabled: false
    # Image overrides for the access logging sidecar
    image:
      repository: logstash
    # The resource allocations for the access log container
    # See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    resources: {}
    # Configuration for the stats pipeline
    statsPipeline:
      enabled: true
      # Use these variables to configure the target server
      # The default server is the CMCC server
      # Your IP must be whitelisted in order to send data to the CMCC service
      server: ophidialab.cmcc.it
      port: 5045
      certificate: |
        -----BEGIN CERTIFICATE-----
        MIIFpDCCA4wCCQDwfiQImQrAHjANBgkqhkiG9w0BAQsFADCBkzELMAkGA1UEBhMC
        SVQxDjAMBgNVBAgMBUl0YWx5MQ4wDAYDVQQHDAVMZWNjZTENMAsGA1UECgwERVNH
        RjENMAsGA1UECwwERVNHRjEbMBkGA1UEAwwSb3BoaWRpYWxhYi5jbWNjLml0MSkw
        JwYJKoZIhvcNAQkBFhpzdGF0aXN0aWNzLXN1cHBvcnRAY21jYy5pdDAeFw0yMzA5
        MjUxNDAwMzRaFw0yNDA5MjQxNDAwMzRaMIGTMQswCQYDVQQGEwJJVDEOMAwGA1UE
        CAwFSXRhbHkxDjAMBgNVBAcMBUxlY2NlMQ0wCwYDVQQKDARFU0dGMQ0wCwYDVQQL
        DARFU0dGMRswGQYDVQQDDBJvcGhpZGlhbGFiLmNtY2MuaXQxKTAnBgkqhkiG9w0B
        CQEWGnN0YXRpc3RpY3Mtc3VwcG9ydEBjbWNjLml0MIICIjANBgkqhkiG9w0BAQEF
        AAOCAg8AMIICCgKCAgEA0ink9ncyjBGU9207PiK/26Ue1lx+fCVjKUVDl569t7Kg
        n5XELdAdgyWQRuTGG1w7H03OFVKPsUGFb80agZBb5T6eP8yRXLz5Ejp5DQHlo0nh
        9ia4bMNJcx0jE1WdYfCP7GCKohTKlFpuThvuu3IhXGHLzgR06ygvDI7Hf554P59D
        OxQ6JO3fTUutO9z78xvyxtY4MBZyMSDRmiJJLc4hzJ1AaPvFjNgU7AZBZ/X8Rl3Y
        69k/sWQtGZlJGZ4ZR66+OMJZEk5NiqrnShBRsczJuUwehpLv8kWVfQ/0nfRmI1aZ
        BGjq1pUH6611G2A42PqseaCMXGEbidPVUZIRwMbMPXud0bdf4+wVAJftehnCHg5G
        LizNgK2/jQWTo69BPbJyAMgI4qjK+NAfNwknRgpamvikQ66GuV4YCOKUV8/GUtLO
        uYMXfYlg2wNhnXJ2YDiEKJAY1/NnAkPxvYpS+r9pi6kd+6uTH8H11G+kjDzK+29y
        /6O1V2LSZL902KF7gdTA104r3HCYOf9BfRWA3C/C5P2vf376fLwskcUy5iQSX0Tc
        IORRkjUKsoKN/FZ2IsPS9I05o5uUW1075Lf6aS/kyg0cEVfTSPyiWug0ozS1oIP4
        dvfbvJv/R7Sz6nz04rcEq6CYaqlw+65WMDlBoUIVu65Gsg05gbnLO3fcNDPlbBsC
        AwEAATANBgkqhkiG9w0BAQsFAAOCAgEAm6iITRmACwLZqSRMC0X9mb0/dwo75n3q
        H6bXHHSU9tozJkrq+OywTNCnWQV9oqUZvh9Iect2tQHmp00LxKrRKgPLEJ3PCq1n
        adQifN10CeKt9b/657X8DgfitaaPYdDu4bVbITRLyeiMJRXfGAzBbEO1hIGapyuI
        5FmuwicCIxxwHU3Ej9fc7ZJr7zQFbmLuLLr6ntsIddNwoMlOrzgj9U3VpZeKoyXo
        rdn2Nnl0WkVowic+Q7mSkQ2dYU4pflVkDHKuFHRZxc8OBEr2QOSzEgx/57BDDsd+
        KTJ6n951f4w0IdviRV7U23H+YojKPIrXsAyaT+axd3C71eE5ZidggAgk0u4dE6Hq
        W/sEIlzlY+JMPQj8ynLpJUeoSO3osHoKn7S4SxCwQQLdaWeUWcLq8t1tCQOYf6CX
        B+6Hvjq5tAH7DVmDcqdXgFQYb/1rdOWiZsuChD2jNEENw7YoJAq0yQPH4BcpkmPU
        qxT26GCw9q8dHas7LkL4oXovUCozKyS02FEud/fan+5jSaiHvbQ1Ge7pHQeclhqr
        3k9JO5ZfOvZad3FRBEVnsEYb0VX+JuEqZarnZhqrzxc/764StngT7zd+YT3O1P+f
        ZOSy8kG7ZaRItC+KjVwOma4rEF6/kKCBUu/LeOgbHnXmwVPBoFiNUQA1FHMRwGPH
        HWB6z/apQUM=
        -----END CERTIFICATE-----

  # Configuration for the THREDDS pod
  thredds:
    # Indicates if THREDDS should be deployed or not
    enabled: true
    # Image overrides for the THREDDS image
    image:
      repository: thredds
    # Volume containing pre-existing THREDDS catalogs
    # If not given, a catalog will be generated containing datasetScan elements for the configured datasets
    # Format is the same as items in mounts except that name and mountPath are ignored
    catalogVolume: {}
    # Configuration for the node-local cache
    # If the local cache is enabled, catalogs will be copied to the local disk of each node
    # where THREDDS pods will run, and will be loaded from there by the THREDDS pods
    localCache:
      enabled: false
      # The image to use for rsync
      rsyncImage:
        repository: rsync
      # A folder will be created within this directory using the namespace and release name
      pathPrefix: /var/cache/esgf
    # The number of replicas for the THREDDS pod
    # If an hpa is configured, this is ignored - the hpa has full control over the number of replicas
    replicaCount: 1
    # The horizontal pod autoscaler configuration for THREDDS pods
    # See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
    hpa: {}
      # minReplicas: 1
      # maxReplicas: 20
      # metrics:
      #   - type: Resource
      #     resource:
      #       name: cpu
      #       target:
      #         type: Utilization
      #         averageUtilization: 80
      #   - type: Resource
      #     resource:
      #       name: memory
      #       target:
      #         type: Utilization
      #         averageUtilization: 70
    # The startup time for the THREDDS container
    # For large pre-existing catalogs, this maybe need to be large (default 5 mins)
    startTimeout: 300
    # The resource allocations for the THREDDS container
    # See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    resources: {}
    # Extra environment variables for the THREDDS container
    # See https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
    extraEnv: []
    # Additional labels for THREDDS resources
    labels: {}
    # The node selector for the THREDDS pod
    # See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    nodeSelector:
    # The affinity rules for the THREDDS pod
    # See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity:
    # The tolerations for the THREDDS pod
    # See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    tolerations:

  # Configuration for the file server pod
  fileServer:
    # Indicates if the file server should be deployed or not
    enabled: true
    # Image overrides for the file server image
    image:
      repository: nginx
    # The number of replicas for the file server pod
    # If an hpa is configured, this is ignored - the hpa has full control over the number of replicas
    replicaCount: 1
    # The horizontal pod autoscaler configuration for file server pods
    # See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
    # Configuration is the same as for the thredds pod
    hpa: {}
    # The resource allocations for the file server container
    # See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    resources: {}
    # Extra environment variables for the file server container
    # See https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
    extraEnv: []
    # Additional labels for file server resources
    labels: {}
    # The node selector for the file server pod
    # See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    nodeSelector:
    # The affinity rules for the file server pod
    # See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity:
    # The tolerations for the file server pod
    # See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    tolerations:

###
# Index node configuration
###
index:
  # Indicates if any index node components are to be enabled
  enabled: true

  # Configuration for Solr
  solr:
    # Indicates if Solr components should be deployed
    enabled: true
    # Image overrides for the Solr image
    image:
      repository: solr
    # The pod security context for all Solr pods
    # This should normally not need to change unless Solr pods are configured to use
    # specific paths on the host for core storage
    podSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
    # The container security context for all Solr containers
    securityContext:
      # Run with a read-only root filesystem by default
      readOnlyRootFilesystem: true
      # The containers will run as the ESGF user by default
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
    # The default resource allocations for all Solr containers
    # Can be overridden on a per-shard basis
    # See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    resources: {}
    # Additional labels for all Solr resources
    labels: {}
    # The node selector for Solr pods
    # See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    nodeSelector:
    # The affinity rules for Solr pods
    # See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity:
    # The tolerations for the Solr pods
    # See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    tolerations:

    # Persistence for Solr
    persistence:
      enabled: false
      size:
        # The size of volumes to use for the master, slave and replicas respectively
        master: 10Gi
        slave: 10Gi
        # The replica volume size can be overridden on a per-replica basis
        replica: 10Gi
      # The storage class to use
      # See https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
      storageClassName:
      # Optional volume selector
      # See https://kubernetes.io/docs/concepts/storage/persistent-volumes/#selector
      selector: {}

    # External URLs for the Solr master and slave
    # If search is enabled but Solr is not, set these URLs to use external Solr instances
    # If Solr is enabled, the local instances will be used in preference
    # masterExternalUrl:
    # slaveExternalUrl:

    # Master-specific resource allocations
    masterResources: {}
    # The slave poll interval (default 60 seconds)
    slavePollInterval: "00:00:60"
    # Slave-specific resource allocations
    slaveResources: {}

    # The default replica poll interval (default one hour)
    replicaPollInterval: "01:00:00"
    # The default replica resources
    replicaResources: {}
    # List of replicas of external Solr instances to use as replica shards
    #
    # If Solr is enabled, a local replica will be created for each specified remote index
    # If Solr is not enabled, the masterUrl will be used directly in the search
    #
    # Each specified replica should contain the following keys:
    #
    #   name: The name to use in resources created for the replica
    #   masterUrl: The URL of the Solr index to replicate, including scheme and path components
    #   pollInterval (optional): Replica-specific poll interval
    #   resources (optional): Replica-specific resource allocations
    #   persistentVolumeSize (optional): The size of the persistent volume to use for this replica, if persistence is enabled
    replicas: []
      # - name: remote-site
      #   masterUrl: https://remote.esgf.node/solr
      #   pollInterval: "06:00:00"

  # Configuration for the search app
  search:
    # Indicates if the search app should be deployed or not
    enabled: true
    # Indicates if the publication API should run as a separate pod or not
    separatePublishApi: false
    # Image overrides for the search app
    image:
      repository: search
    # The number of replicas for the search deployment
    replicaCount: 1
    # The resource allocations for the search container
    # See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    resources: {}
    # Extra environment variables for the search container
    # See https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
    extraEnv: []
    # Additional labels for search resources
    labels: {}
    # The node selector for the search pods
    # See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    nodeSelector:
    # The affinity rules for the search pods
    # See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity:
    # The tolerations for the search pods
    # See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    tolerations:
    # Timeout settings
    connectionTimeout: "1000"
    datasetsTimeout: "20000"
    filesTimeout: "3600000"
    # Security context for search container.
    securityContext:
      # Run with a read-only root filesystem by default
      readOnlyRootFilesystem: true
      # The containers will run as the ESGF user by default
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
