{{- if eq .Values.database.type "internal" -}}
{{- $database := .Values.database.internal -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "esgf.component.fullname" (list . "database") }}
  labels: {{ include "esgf.component.labels" (list . "database") | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels: {{ include "esgf.component.selectorLabels" (list . "database") | nindent 6 }}
  template:
    metadata:
      labels: {{ include "esgf.component.selectorLabels" (list . "database") | nindent 8 }}
      # Force deployments to roll if the secret changes
      # https://helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/database/secret.yaml") . | sha256sum }}
    spec:
      {{- with (default .Values.image.pullSecrets $database.image.pullSecrets) }}
      imagePullSecrets: {{ toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        # This is the gid of the esg group in the container
        # Setting this allows many providers to chown dynamic volumes
        fsGroup: 1000
      containers:
        - name: database
          {{- with $database.securityContext }}
          securityContext: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{ include "esgf.component.image" (mergeOverwrite .Values.image $database.image) | indent 10 | trim }}
          resources: {{ toYaml $database.resources | nindent 12 }}
          ports:
            - name: postgres
              protocol: TCP
              containerPort: 5432
          # The readiness and liveness probes run the same thing, but the liveness
          # probe just waits a while before kicking in whereas the readiness probe
          # starts straight away
          readinessProbe: &probe
            tcpSocket:
              port: 5432
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            <<: *probe
            initialDelaySeconds: 120
          env:
            - name: POSTGRES_DATABASE
              value: esgcet
            - name: POSTGRES_USER
              value: dbsuper
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "esgf.component.fullname" (list . "database") }}
                  key: "database-password"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/pgsql
      {{- with $database.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with $database.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with $database.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: postgres-data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            {{- if .Values.persistence.database.existingClaim }}
            claimName: {{ .Values.persistence.database.existingClaim }}
            {{- else }}
            claimName: {{ include "esgf.component.fullname" (list . "database") }}
            {{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
{{- end -}}
