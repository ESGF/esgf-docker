stages:
  - build-1
  - build-2
  - build-3

.dind:
  services:
    - docker:19.03-dind
  image: docker:19.03
  variables:
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker info
    # Use the GitLab container registry by default
    - REGISTRY="${REGISTRY:-$CI_REGISTRY}"
    - REGISTRY_USER="${REGISTRY_USER:-$CI_REGISTRY_USER}"
    # Allow the password to come from a file
    - test -z "$REGISTRY_PASSWORD" && test -f "$REGISTRY_PASSWORD_FILE" && REGISTRY_PASSWORD="$(cat "$REGISTRY_PASSWORD_FILE")"
    # Also allow the password to be base64 encoded (GitLab masked variables must be base64-encoded)
    - test -z "$REGISTRY_PASSWORD" && test -n "$REGISTRY_PASSWORD_B64" && REGISTRY_PASSWORD="$(echo -n "$REGISTRY_PASSWORD_B64" | base64 -d)"
    # If not given, use the GitLab container registry password
    - REGISTRY_PASSWORD="${REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}"
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $REGISTRY

.docker-build:
  extends: .dind
  script:
    # Use the basename of the context directory as the image name
    - IMAGE_NAME="${IMAGE_NAME:-"$(basename $CONTEXT_DIR)"}"
    # By default, use the GitLab container registry for the project
    - REPOSITORY_BASE="${REPOSITORY_BASE:-$CI_REGISTRY_IMAGE}"
    - REPOSITORY="${REPOSITORY:-"$REPOSITORY_BASE/$IMAGE_NAME"}"
    # Use the latest build for the branch and the latest build for master as cache sources
    - LATEST="$REPOSITORY:latest"
    - LATEST_BRANCH="$REPOSITORY:$CI_COMMIT_REF_SLUG"
    - docker pull $LATEST || true
    - docker pull $LATEST_BRANCH || true
    - DOCKER_ARGS="--cache-from $LATEST --cache-from $LATEST_BRANCH"
    # Build and push with the short commit SHA as a tag
    - DOCKER_ARGS="$DOCKER_ARGS --tag $REPOSITORY:$CI_COMMIT_SHORT_SHA"
    # Add the repository base and image version as build args for references
    - DOCKER_ARGS="$DOCKER_ARGS --build-arg ESGF_REPOSITORY_BASE=$REPOSITORY_BASE --build-arg ESGF_IMAGES_VERSION=$CI_COMMIT_SHORT_SHA"
    # Use any environment variable starting with BUILD_ARG_ as a build arg
    - BUILD_ARGS=$(env | grep -e "^BUILD_ARG_" | awk -F '=' '{ print $1 }' || true)
    - for arg in $BUILD_ARGS; do DOCKER_ARGS="$DOCKER_ARGS --build-arg ${arg:10}=$(eval "echo \$$arg")"; done
    # Build and push
    - docker build $DOCKER_ARGS $DOCKER_EXTRA_ARGS $CONTEXT_DIR
    - docker push $REPOSITORY:$CI_COMMIT_SHORT_SHA

build-base:
  extends: .docker-build
  stage: build-1
  variables:
    CONTEXT_DIR: $CI_PROJECT_DIR/images/base

build-conda-builder:
  extends: .docker-build
  stage: build-2
  variables:
    CONTEXT_DIR: $CI_PROJECT_DIR/images/conda-builder

build-conda-runtime:
  extends: .docker-build
  stage: build-2
  variables:
    CONTEXT_DIR: $CI_PROJECT_DIR/images/conda-runtime

build-tomcat-builder:
  extends: .docker-build
  stage: build-2
  variables:
    CONTEXT_DIR: $CI_PROJECT_DIR/images/tomcat-builder

build-tomcat-runtime:
  extends: .docker-build
  stage: build-2
  variables:
    CONTEXT_DIR: $CI_PROJECT_DIR/images/tomcat-runtime

build-postgres:
  extends: .docker-build
  stage: build-2
  variables:
    CONTEXT_DIR: $CI_PROJECT_DIR/images/postgres

build-idp:
  extends: .docker-build
  stage: build-3
  variables:
    CONTEXT_DIR: $CI_PROJECT_DIR/images/idp

build-schema-migrate:
  extends: .docker-build
  stage: build-3
  variables:
    CONTEXT_DIR: $CI_PROJECT_DIR/images/schema-migrate
