apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "{{ template "fullname" . }}-visus"
  labels:
{{ include "default-labels" . | indent 4 }}
    component: visus
spec:
  replicas: 1
  # Select pods on release and component only, rather than all labels
  # This means that the selector will match all pods from all versions of the chart when upgrading
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      component: visus
  template:
    metadata:
      labels:
{{ include "default-labels" . | indent 8 }}
        component: visus
    spec:
      # Setting fsGroup for the pod allows some provisioners to chown mounted volumes to the given group
      #   The publish group is 1001 inside the container
      securityContext:
        fsGroup: 1001
      containers:
        - name: visus
          image: "{{ .Values.visus.image.repository }}:{{ .Values.visus.image.tag }}"
          imagePullPolicy: {{ default "" .Values.visus.image.pullPolicy | quote }}
          ports:
            - name: http
              containerPort: 80
          # The readiness and liveness probes run the same thing, but the liveness
          # probe just waits a while before kicking in whereas the readiness probe
          # starts straight away
          readinessProbe: &probe
            httpGet:
              path: /
              port: 80
              # The ALLOWED_HOSTS setting means that the app will only accept
              # requests from the correct host
              httpHeaders:
                - name: Host
                  value: "{{ .Values.hostname }}"
                - name: X-Forwarded-Host
                  value: "{{ .Values.hostname }}"
                - name: X-Forwarded-Proto
                  value: https
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            <<: *probe
            initialDelaySeconds: 600
          volumeMounts:
            - mountPath: /data/xml
              name: tds-data
            - mountPath: /home/visus/webviewer/config.js
              subPath: config.js
              name: config-js
          resources:
{{ toYaml .Values.visus.resources | indent 12 }}
      volumes:
        - name: tds-data
          persistentVolumeClaim:
            claimName: "{{ template "fullname" . }}-tds-data"
        - name: config-js
          configMap:
            name: "{{ template "fullname" . }}-visus-config-js"
