#!/usr/bin/env bash

#####
## This script is a wrapper for docker-compose that makes sure the
## environment for the deployment has been imported and injects
## Solr shard configuration
#####

set -eu

COMPOSE_OPTS="-f docker-compose.yml"

# First, we need to generate the Solr shard configuration
# To do this, we use a gomplate template with the shard configuration as a datasource
if [ -f /esg/solr_shards.yaml ]; then
    COMPOSE_SHARDS_FILE="$(mktemp)"
    gomplate --out "$COMPOSE_SHARDS_FILE" --datasource shards=/esg/solr_shards.yaml <<"EOF"
{{- define "name" }}{{ if has . "name" }}{{ .name }}{{ else }}{{ (urlParse .url).Host | replaceAll "." "-" }}{{ end }}{{ end }}
{{- define "service-name" }}esgf-solr-{{ template "name" . }}{{ end }}
{{- define "volume-name" }}solr-{{ template "name" . }}-home{{ end }}

{{- $shards := (datasource "shards").shards }}

version: '3.4'

services:
{{- range $shards }}
  {{ template "service-name" . }}:
    image: "${ESGF_HUB}/${ESGF_PREFIX}solr:${ESGF_VERSION}"
    restart: always
    environment:
      ESGF_SOLR_MASTER_URL: "{{ .url }}"
      {{- if has . "replicationInterval" }}
      ESGF_SOLR_REPLICATION_INTERVAL: "{{ .replicationInterval }}"
      {{- end }}
    volumes:
      - "{{ template "volume-name" . }}:/esg/solr-home"
{{ end }}
  esgf-index-node:
    environment:
      ESGF_SOLR_SHARDS: "esgf-solr-slave:8983/solr{{ range $shards }},{{ template "service-name" . }}:8983/solr{{ end }}"

volumes:
{{- range $shards }}
  {{ template "volume-name" . }}:
{{- end }}
EOF
    COMPOSE_OPTS="$COMPOSE_OPTS -f $COMPOSE_SHARDS_FILE"
fi

exec docker-compose $COMPOSE_OPTS config
