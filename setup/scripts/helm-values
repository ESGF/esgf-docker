#!/bin/bash

set -eo pipefail

. "$(dirname $BASH_SOURCE)/functions.sh"

#####
# This script outputs YAML configuration for use with the ESGF Helm chart
#####

CLUSTER_TYPE="$1"
[ -z "$CLUSTER_TYPE" ] && error "Please specify a cluster type"

## Start with required stuff - hostname, image versions, certificates and secrets
required_yaml="$(gomplate <<"EOF"
hostname: {{ .Env.ESGF_HOSTNAME }}

solr:
  image:
    repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}solr
    tag: {{ .Env.ESGF_VERSION }}
postgresEsgcet:
  image:
    repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}postgres
    tag: {{ .Env.ESGF_VERSION }}
postgresSecurity:
  image:
    repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}postgres-security
    tag: {{ .Env.ESGF_VERSION }}
orp:
  image:
    repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}orp
    tag: {{ .Env.ESGF_VERSION }}
indexNode:
  image:
    repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}index-node
    tag: {{ .Env.ESGF_VERSION }}
idpNode:
  image:
    repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}idp-node
    tag: {{ .Env.ESGF_VERSION }}
tds:
  image:
    repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}tds
    tag: {{ .Env.ESGF_VERSION }}
cog:
  image:
    repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}cog
    tag: {{ .Env.ESGF_VERSION }}
  postgres:
    image:
      repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}postgres
      tag: {{ .Env.ESGF_VERSION }}
auth:
  image:
    repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}auth
    tag: {{ .Env.ESGF_VERSION }}
  postgres:
    image:
      repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}postgres
      tag: {{ .Env.ESGF_VERSION }}
slcs:
  image:
    repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}slcs
    tag: {{ .Env.ESGF_VERSION }}
  postgres:
    image:
      repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}postgres
      tag: {{ .Env.ESGF_VERSION }}
proxy:
  image:
    repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}proxy
    tag: {{ .Env.ESGF_VERSION }}
publisher:
  image:
    repository: {{ .Env.ESGF_HUB }}/{{ .Env.ESGF_PREFIX }}publisher
    tag: {{ .Env.ESGF_VERSION }}

certificates:
  esg-trust-bundle.pem: |
{{ file.Read "/esg/certificates/esg-trust-bundle.pem" | indent 4 }}
  hostcert.crt: |
{{ file.Read "/esg/certificates/hostcert/hostcert.crt" | indent 4 }}
  hostcert.key: |
{{ file.Read "/esg/certificates/hostcert/hostcert.key" | indent 4 }}
  slcsca.crt: |
{{ file.Read "/esg/certificates/slcsca/ca.crt" | indent 4 }}
  slcsca.key: |
{{ file.Read "/esg/certificates/slcsca/ca.key" | indent 4 }}

secrets:
{{- range (file.ReadDir "/esg/secrets") }}
  {{ . }}: >-
{{ file.Read (printf "/esg/secrets/%s" .) | indent 4 }}
{{- end }}
EOF
)"

# Produce base64-encoded tarballs for any config overrides
function config2base64 {
    pushd $1 > /dev/null
    tar -cz * | base64
    popd > /dev/null
}
overrides_yaml_file="$(mktemp)"
echo "configuration:" > "$overrides_yaml_file"
if [ -d "/esg/auth" ]; then
    echo "  auth-overrides.tar.gz.b64: |-" >> "$overrides_yaml_file"
    config2base64 /esg/auth | indent 4 >> "$overrides_yaml_file"
fi
if [ -d "/esg/config" ]; then
    echo "  esg-config-overrides.tar.gz.b64: |-" >> "$overrides_yaml_file"
    config2base64 /esg/config | indent 4 >> "$overrides_yaml_file"
fi
if [ -d "/esg/publisher" ]; then
    echo "  publisher-overrides.tar.gz.b64: |-" >> "$overrides_yaml_file"
    config2base64 /esg/publisher | indent 4 >> "$overrides_yaml_file"
fi
if [ -d "/esg/thredds" ]; then
    echo "  thredds-overrides.tar.gz.b64: |-" >> "$overrides_yaml_file"
    config2base64 /esg/thredds | indent 4 >> "$overrides_yaml_file"
fi
overrides_yaml="$(cat "$overrides_yaml_file")"

# Include shard config
if [ -f /esg/solr_shards.yaml ]; then
    solr_shards_yaml="$(gomplate --datasource shards=/esg/solr_shards.yaml  <<"EOF"
{{- define "shard-name" }}{{ if has . "name" }}{{ .name }}{{ else }}{{ (urlParse .url).Host | replaceAll "." "-" }}{{ end }}{{ end }}
solr:
  shards:
    shardList:
{{- range (datasource "shards").shards }}
      - name: "{{ template "shard-name" . }}"
        url: "{{ .url }}"
        {{- if has . "replicationInterval" }}
        replicationInterval: "{{ .replicationInterval }}"
        {{- end }}
{{- end }}
EOF
)"
fi

# Work out if there are cluster type overrides to include
cluster_type_overrides="cluster/kubernetes/${CLUSTER_TYPE}/helm-overrides.yaml"
if [ -f "$cluster_type_overrides" ]; then
    cluster_type_yaml="$(cat "$cluster_type_overrides")"
fi

# Include any user overrides
user_overrides="/esg/helm-overrides.yaml"
if [ -f "$user_overrides" ]; then
    user_overrides_yaml="$(cat "$user_overrides")"
fi

merge_yaml "$required_yaml" "$overrides_yaml" "$solr_shards_yaml" "$cluster_type_yaml" "$user_overrides_yaml"
