# Docker compose file to start a full ESGF node as a distributed stack

# Required env variables:
#
# ESGF_CONFIG : points to the root ESGF configuration directory
#       example: export ESGF_CONFIG=/Users/cinquini/ESGF_CONFIG
# ESGF_HOSTNAME: HostName or IP address for apache httpd front-end server
#       example: export ESGF_HOSTNAME=my-node.esgf.org
#       example: export ESGF_HOSTNAME=`docker-machine ip`
# ESGF_VERSION: version of ESGF/Docker distribution
#       example: export ESGF_VERSION=1.2

# SOLR_DATA: location of Solr index
#       example: export SOLR_DATA=/esg/solr-index
# COG_DATA: location of CoG site data
#       example: export COG_DATA=/usr/local/cog/cog_config
# TDS_DATA: location of TDS catalogs
#       example: export TDS_DATA=/esg/content/thredds
# PG_DATA: location od postgres database and configuration
#       example: export PG_DATA=/var/lib/pgsql/data
# ESGF_DATA_ARCHIVE: location of science data
#       example: export ESGF_DATA_ARCHIVE=/esgf/data_archive

#
# Services deployment:
# - front_node: httpd daemon, cog, and visualizer
# - db_node: postgres
# - index_node: esgf-search web application runnning within Tomcat
# - idp_node: esgf-idp web application running within Tomcat
# - data_node: TDS and esg-orp applications running within Tomcat
# - solr_node: Solr search engine running within Jetty

version: '3'

networks:
  # network to keep postgres database isolated
  dbnetwork:

services:

  # ESGF postgres database
  esgf-postgres:
    image: esgfhub/esgf-postgres:${ESGF_VERSION}
    ports:
      - "5432:5432"
    networks:
      - dbnetwork
    volumes:
      #- $PG_DATA:/var/lib/pgsql/data
      - pg_data:/var/lib/pgsql/data
    deploy:
      placement:
        constraints: [node.labels.esgf_db_node == true]

  # CoG
  # data container to hold CoG source code and python virtual environment
  esgf-cog:
    image: esgfhub/esgf-cog:${ESGF_VERSION}
    ports:
      - "8000:8000"
    volumes:
      - cog_install_dir:/usr/local/cog/cog_install
      - cog_venv:/usr/local/cog/venv
      #- $COG_DATA:/usr/local/cog/cog_config
      - cog_data:/usr/local/cog/cog_config
      - $ESGF_CONFIG/httpd/certs/:/etc/certs/
      - $ESGF_CONFIG/httpd/conf/esgf-httpd.conf:/etc/httpd/conf.d/esgf-httpd.conf
      - $ESGF_CONFIG/grid-security/certificates/:/etc/grid-security/certificates/
      - $ESGF_CONFIG/esg/config/:/esg/config/
    #command: $ESGF_HOSTNAME true true # ESGF=true, keep django server runnining on port 8000
    command: $ESGF_HOSTNAME true false # ESGF=true, django server running on port 8000 = false
    depends_on:
      - esgf-postgres
    networks:
      - dbnetwork
    environment:
      - COG_DIR=/usr/local/cog
      - COG_INSTALL_DIR=/usr/local/cog/cog_install
      - COG_CONFIG_DIR=/usr/local/cog/cog_config
      - ESGF_HOSTNAME
      # flag to execute CoG initialization, defaults to true, may be overridden from shell environment before starting docker-compose
      - ${INIT:-true}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.esgf_front_node == true]


  esgf-solr:
    image: esgfhub/esgf-solr:${ESGF_VERSION}
    ports:
      - "8983:8983"
      - "8984:8984"
    volumes:
      - solr_data:/esg/solr-index
      - $ESGF_CONFIG/esg/config/esgf_shards_static.xml:/esg/config/esgf_shards_static.xml
    networks:
      - default
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.esgf_solr_node == true]


  esgf-index-node:
    image: esgfhub/esgf-index-node:${ESGF_VERSION}
    ports:
      - "8081:8080"
      - "8444:8443"
    depends_on:
      - esgf-solr
    volumes:
     - $ESGF_CONFIG/esg/config/:/esg/config/
     - $ESGF_CONFIG/esg/config/tomcat/esg-truststore.ts:/usr/java/latest/jre/lib/security/jssecacerts
    networks:
      - default
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.esgf_index_node == true]

  esgf-idp-node:
    image: esgfhub/esgf-idp-node:${ESGF_VERSION}
    ports:
      - "8082:8080"
      - "8445:8443"
    networks:
      - default
      - dbnetwork
    volumes:
     - $ESGF_CONFIG/esg/config/:/esg/config/
     - $ESGF_CONFIG/esg/config/tomcat/esg-truststore.ts:/usr/java/latest/jre/lib/security/jssecacerts
    depends_on:
      - esgf-postgres
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.esgf_idp_node == true]

  esgf-data-node:
    image: esgfhub/esgf-data-node:${ESGF_VERSION}
    ports:
      - "8083:8080"
      - "8446:8443"
    networks:
      - default
      - dbnetwork
    volumes:
      - tds_data:/esg/content/thredds
      - $ESGF_CONFIG/esg/config/:/esg/config/
      - $ESGF_CONFIG/webapps/thredds/WEB-INF/web.xml:/usr/local/tomcat/webapps/thredds/WEB-INF/web.xml
      - $ESGF_CONFIG/esg/config/tomcat/esg-truststore.ts:/usr/java/latest/jre/lib/security/jssecacerts
      #- $ESGF_DATA_ARCHIVE:/esg/data_archive
    environment:
     - ESGF_HOSTNAME
    depends_on:
      - esgf-postgres
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.esgf_data_node == true]

  esgf-httpd:
    image: esgfhub/esgf-httpd:${ESGF_VERSION}
    entrypoint: /usr/local/bin/docker-entrypoint.sh
    volumes:
      - cog_install_dir:/usr/local/cog/cog_install
      - cog_venv:/usr/local/cog/venv
      - cog_data:/usr/local/cog/cog_config
      - $ESGF_CONFIG/httpd/certs/:/etc/certs/
      - $ESGF_CONFIG/httpd/conf/esgf-httpd.conf:/etc/httpd/conf.d/esgf-httpd.conf
      - $ESGF_CONFIG/grid-security/certificates/:/etc/grid-security/certificates/
      - $ESGF_CONFIG/esg/config/:/esg/config/
      # - esgf-node-manager
    environment:
      - SSL_CERT_DIR=/etc/grid-security/certificates
      - COG_CONFIG_DIR=/usr/local/cog/cog_config
      - ESGF_HOSTNAME
    ports:
     - "80:80"
     - "443:443"
    depends_on:
     - esgf-cog
    #  - esgf-node-manager
    # httpd URLs must use hostname=$ESGF_HOSTNAME
    networks:
      default:
        aliases:
          - "${ESGF_HOSTNAME}"
      dbnetwork: {}
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.esgf_front_node == true]

  esgf-slcs:
    command: ["-sn", "$ESGF_HOSTNAME", "-ds", "rootAdmin", "-sdn", "slcs", "-sdh", "slcs-postgres", "-sdu", "dbsuper", "-udn", "esgcet", "-udh", "esgf-postgres", "-udu", "dbsuper", "--static-url", "https://$ESGF_HOSTNAME/slcs-static/", "--url-prefix", "slcs", "--use-x-forwarded-host"]
    depends_on:
      - slcs-postgres
      - slcs-nginx
    image: esgfhub/esgf-slcs:${ESGF_VERSION}
    networks:
      - default
      - dbnetwork
    ports:
      - "5000:5000"
    volumes:
      - "slcs_static_web:/var/www/static"
      - "$ESGF_CONFIG/slcs/conf/db/:/usr/local/esgf-slcs-server/conf/db"
      - "$ESGF_CONFIG/slcs/conf/ca/:/usr/local/esgf-slcs-server/conf/ca"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.esgf_idp_node == true]

  slcs-nginx:
    image: nginx
    networks:
      - default
      - dbnetwork
    volumes:
      - "slcs_static_web:/usr/share/nginx/html"
      - "$ESGF_CONFIG/slcs/conf/nginx/nginx.conf:/etc/nginx/conf.d/default.conf"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.esgf_idp_node == true]

  slcs-postgres:
    environment:
      - POSTGRES_PASSWORD=changeit
      - POSTGRES_USER=dbsuper
      - POSTGRES_DB=slcs
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    image: postgres
    networks:
      - default
      - dbnetwork
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.esgf_idp_node == true]

  # useful visualizer container, not really needed
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

# Use Docker volumes to store persistent data
# that needs to be shared across services
# (which must be co-located on the same node).
# When services are first started, 
# volumes are initialized with content from directory in container
volumes:
  # cog source directory
  cog_install_dir:
  # cog venv directory
  cog_venv:
  # cog site data
  cog_data:
  # postgres database
  pg_data:
  # solr indexes
  solr_data:
  # TDS catalogs
  tds_data:
  # SLCS web pages
  slcs_static_web:
