# Docker compose file to start a full ESGF node as a distrubuted stack

# Required env variables:
#
# ESGF_CONFIG : points to the root ESGF configuration directory
#       example: export ESGF_CONFIG=/Users/cinquini/ESGF_CONFIG
# ESGF_HOSTNAME: HostName or IP address for apache httpd front-end server
#       example: export ESGF_HOSTNAME=my.esgf.node
#       example: export ESGF_HOSTNAME=`docker-machine ip`
# ESGF_VERSION: version of ESGF/Docker distribution
#       example: export ESGF_VERSION=1.0
# SOLR_DATA: location of Solr index
#       example: export SOLR_DATA=/esg/solr-index
# COG_DATA: location of CoG site data
#       example: export COG_DATA=/usr/local/cog/cog_config
# TDS_DATA: location of TDS catalogs
#       example: export TDS_DATA=/esg/content/thredds

#
# Services deployment:
# - front_node: httpd daemon, cog, and visualizer
# - db_node: postgres
# - index_node: esgf-search web application runnning within Tomcat, solr search engine running within Jetty
# - idp_node: esgf-idp web application running within Tomcat

version: '3'

networks:
  # network to keep postgres database isolated
  dbnetwork:

services:

  # ESGF postgres database
  esgf-postgres:
    image: esgfhub/esgf-postgres:${ESGF_VERSION}
    ports:
      - "5432:5432"
    networks:
      - dbnetwork
    volumes:
      - pg_data:/var/lib/pgsql/data
    deploy:
      placement:
        constraints: [node.labels.esgf_type == db_node]

  # CoG
  # data container to hold CoG source code and python virtual environment
  esgf-cog:
    image: esgfhub/esgf-cog:${ESGF_VERSION}
    ports:
      - "8000:8000"
    volumes:
      - cog_install_dir:/usr/local/cog/cog_install
      - cog_venv:/usr/local/cog/venv
      - $COG_DATA:/usr/local/cog/cog_config
      - $ESGF_CONFIG/httpd/certs/:/etc/certs/
      - $ESGF_CONFIG/httpd/conf/esgf-httpd.conf:/etc/httpd/conf.d/esgf-httpd.conf
      - $ESGF_CONFIG/grid-security/certificates/:/etc/grid-security/certificates/
      - $ESGF_CONFIG/esg/config/:/esg/config/
    #command: $ESGF_HOSTNAME true true # ESGF=true, keep django server runnining on port 8000
    command: $ESGF_HOSTNAME true false # ESGF=false, django server running on port 8000 = false
    depends_on:
      - esgf-postgres
    networks:
      - dbnetwork
    environment:
      - COG_DIR=/usr/local/cog
      - COG_INSTALL_DIR=/usr/local/cog/cog_install
      - COG_CONFIG_DIR=/usr/local/cog/cog_config
      - ESGF_HOSTNAME
      # flag to execute CoG initialization, defaults to true, may be overridden from shell environment before starting docker-compose
      - ${INIT:-true}
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 0
      placement:
        constraints: [node.labels.esgf_type == front_node]


  esgf-solr:
    image: esgfhub/esgf-solr:${ESGF_VERSION}
    ports:
      - "8983:8983"
      - "8984:8984"
    volumes:
      - $SOLR_DATA:/esg/solr-index
    networks:
      - default
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.esgf_type == index_node]


  esgf-index-node:
    image: esgfhub/esgf-index-node:${ESGF_VERSION}
    ports:
      - "8080:8080"
      - "8443:8443"
    depends_on:
      - esgf-solr
    volumes:
     - $ESGF_CONFIG/esg/config/:/esg/config/
     - $ESGF_CONFIG/esg/config/tomcat/esg-truststore.ts:/usr/java/latest/jre/lib/security/jssecacerts
    networks:
      - default
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.esgf_type == index_node]

  esgf-idp-node:
    image: esgfhub/esgf-idp-node:${ESGF_VERSION}
    ports:
      - "8082:8080"
      - "8445:8443"
    networks:
      - default
      - dbnetwork
    volumes_from:
     - $ESGF_CONFIG/esg/config/:/esg/config/
     - $ESGF_CONFIG/esg/config/tomcat/esg-truststore.ts:/usr/java/latest/jre/lib/security/jssecacerts
    depends_on:
      - esgf-postgres


  esgf-httpd:
    image: esgfhub/esgf-httpd:${ESGF_VERSION}
    entrypoint: /usr/local/bin/docker-entrypoint.sh
    volumes:
      - cog_install_dir:/usr/local/cog/cog_install
      - cog_venv:/usr/local/cog/venv
      - $COG_DATA:/usr/local/cog/cog_config
      - $ESGF_CONFIG/httpd/certs/:/etc/certs/
      - $ESGF_CONFIG/httpd/conf/esgf-httpd.conf:/etc/httpd/conf.d/esgf-httpd.conf
      - $ESGF_CONFIG/grid-security/certificates/:/etc/grid-security/certificates/
      - $ESGF_CONFIG/esg/config/:/esg/config/
      # - esgf-node-manager
    environment:
      - SSL_CERT_DIR=/etc/grid-security/certificates
      - COG_CONFIG_DIR=/usr/local/cog/cog_config
      - ESGF_HOSTNAME
    ports:
     - "80:80"
     - "443:443"
    depends_on:
     - esgf-cog
    #  - esgf-node-manager
    # httpd URLs must use hostname=$ESGF_HOSTNAME
    networks:
      default:
        aliases:
          - "${ESGF_HOSTNAME}"
      dbnetwork: {}
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.esgf_type == front_node]

  # useful visualizer container, not really needed
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "9080:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

# Use Docker volumes to store persistent data
# (which survives when the containers are removed)
# When services are first started, 
# volumes are initialized with content from directory in container
volumes:
  # postgres data and configuration
  pg_data:
  # cog data directory
  #cog_data:
  # cog source directory
  cog_install_dir:
  # cog venv directory
  cog_venv:
  # contains Solr index data
  #solr_data:
  # contains TDS configuration, catalogs, cache, and logs
  # (directory below -Dtds.content.root.path=/esg/content)
  #tds_data:
