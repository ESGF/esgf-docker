# Docker Compose file to start a full ESGF node.
#
# Required env variables:
#
# ESGF_CONFIG : points to the root ESGF configuration directory
#       example: export ESGF_CONFIG=/Users/cinquini/ESGF_CONFIG
# ESGF_HOSTNAME: HostName or IP address for apache httpd front-end server
#       example: export ESGF_HOSTNAME=my.esgf.node
#       example: export ESGF_HOSTNAME=`docker-machine ip`
# ESGF_VERSION: version of ESGF/Docker distribution
#       example: export ESGF_VERSION=1.0
# ESGF_DATA_DIR: root of ESGF data directories

version: '3.4'


services:
  esgf-proxy:
    image: cedadev/esgf-proxy
    build: ./proxy
    restart: "no"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "$ESGF_CONFIG/hostcert:/etc/nginx/ssl:ro"
    environment:
      ESGF_HOSTNAME:
      ESGF_SOLR_INTERNAL_URL: http://esgf-solr:8983
      ESGF_INDEX_NODE_INTERNAL_URL: http://esgf-index-node:8080
      ESGF_TDS_INTERNAL_URL: http://esgf-tds:8080
      ESGF_ORP_INTERNAL_URL: http://esgf-orp:8080
      ESGF_IDP_INTERNAL_URL: http://esgf-idp-node:8080
      ESGF_SLCS_INTERNAL_URL: http://esgf-slcs:8000
      ESGF_AUTH_INTERNAL_URL: http://esgf-auth:8000
      ESGF_COG_INTERNAL_URL: http://esgf-cog:8000
    depends_on:
      - esgf-solr
      - esgf-index-node
#      - esgf-tds
#      - esgf-orp
      - esgf-idp-node
#      - esgf-slcs
#      - esgf-auth
      - esgf-cog

  # Zookeeper is not replicated (yet), but is used to store solr config
  esgf-zookeeper:
    image: "zookeeper:${ZOOKEEPER_VERSION}"
    restart: "no"
    expose:
      - "2181"
      - "2888"
      - "3888"
    volumes:
      - "zk-data:/data"
      - "zk-datalog:/datalog"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc 127.0.0.1 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 3

  esgf-solr:
    image: cedadev/esgf-solr
    build: ./solr
    restart: "no"
    environment:
      SOLR_HOME: /esg/solr-home
      SOLR_HEAP: 1g
      ZOOKEEPER_HOST: esgf-zookeeper
    command:
      - "solr-foreground"
      - "-c"
      - "-p"
      - "8983"
      - "-z"
      - "esgf-zookeeper:2181"
      - "-s"
      - "/esg/solr-home"
    volumes:
      - "solr-home:/esg/solr-home"
    depends_on:
      - esgf-zookeeper

  esgf-postgres:
    image: cedadev/esgf-postgres
    build: ./postgres
    restart: "no"
    environment:
      DBSUPER_PASSWORD: "dbsuper123"
      ESGCET_PASSWORD: "esgcet123"
    volumes:
      - "postgres-data:/var/lib/pgsql/data"

  # Build dependency only
  esgf-configure:
    image: cedadev/esgf-configure
    build: ./configure
    # Use an entrypoint that exits immediately with success
    entrypoint: ["true"]
    # Environment variables required for config files
    # This uses a YAML anchor so that these are easy to reference elsewhere
    environment: &config_env
      ESGF_HOSTNAME:
      ESGF_DATABASE_HOST: esgf-postgres
      ESGF_DATABASE_PASSWORD: "dbsuper123"
      ESGF_SOLR_INTERNAL_URL: "http://esgf-solr:8983"

  # Build dependency only
  esgf-tomcat:
    image: cedadev/esgf-tomcat
    build: ./tomcat
    # Use an entrypoint that exits immediately with success
    entrypoint: ["true"]

  # Build dependency only
  esgf-django:
    image: cedadev/esgf-django
    build: ./django
    # Use an entrypoint that exits immediately with success
    entrypoint: ["true"]

  esgf-orp:
    image: cedadev/esgf-orp
    build: ./orp
    restart: "no"
    environment:
      <<: *config_env
      ESGF_KEYSTORE_FILE: /esg/tomcat-keystore.pkcs12
      ESGF_KEYSTORE_PASSWORD: changeit
      ESGF_KEYSTORE_ALIAS: "$ESGF_HOSTNAME"
    volumes:
      - "$ESGF_CONFIG/tomcat-keystore.pkcs12:/esg/tomcat-keystore.pkcs12:ro"
    depends_on:
      - esgf-configure
      - esgf-tomcat

  esgf-index-node:
    image: cedadev/esgf-index-node
    build: ./index-node
    restart: "no"
    environment:
      <<: *config_env
    depends_on:
      - esgf-configure
      - esgf-tomcat
      - esgf-solr
#      - esgf-orp

  esgf-idp-node:
    image: cedadev/esgf-idp-node
    build: ./idp-node
    restart: "no"
    environment:
      <<: *config_env
    depends_on:
      - esgf-configure
      - esgf-tomcat
      - esgf-postgres

  esgf-cog:
    image: cedadev/esgf-cog
    build: ./cog
    restart: "no"
    environment:
      <<: *config_env
      ESGF_COG_TIME_ZONE: "Europe/London"
      ESGF_COG_SECRET_KEY: "djangosecretkeyforcog"
    volumes:
      - "$ESGF_CONFIG/esg-trusted-bundle.crt:/usr/local/share/ca-certificates/esg-trusted-bundle.crt:ro"
    depends_on:
      - esgf-configure
      - esgf-django  # Build dependency
      - esgf-postgres

#  esgf-slcs-postgres:
#    image: postgres
#    environment:
#      POSTGRES_USER: slcsuser
#      POSTGRES_PASSWORD: "Password456"
#      POSTGRES_DB: slcs
#      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
#    volumes:
#      - "slcs-postgres-data:/var/lib/postgresql/data"

  # This container sets up a self-signed CA in the slcs-certificate-authority volume
#  esgf-slcs-self-signed-ca:
#    image: centos:6
#    command:
#      - bash
#      - -c
#      - |
#        set -ex
#        # Create the CA if it doesn't exist
#        if [ ! -f "/ca/onlineca.pem" ]; then
#            # Otherwise, create the certificate
#            openssl req -new -nodes -x509 -subj "$$CA_CERT_SUBJECT" -days 3650 \
#              -keyout "/ca/onlineca.key" \
#              -out "/ca/onlineca.pem" -extensions v3_ca
#        fi
#        # Make the key readable by the Django user only (uid 1001)
#        chmod 400 /ca/onlineca.key
#        chown 1001:1001 /ca/onlineca.key
#        # Create an empty trustroots directory
#        mkdir -p /ca/trustroots
#    environment:
#      CA_CERT_SUBJECT: /DC=esgf/CN=localhost
#    volumes:
#      - "slcs-certificate-authority:/ca"

#  esgf-slcs:
#    image: cedadev/esgf-slcs
#    ports:
#      - "8000:8000"
#    environment:
      # Generic Django settings
      #SCRIPT_NAME: /esgf-slcs
#      DJANGO_SESSION_COOKIE_SECURE: "0"
#      DJANGO_CSRF_COOKIE_SECURE: "0"
#      DJANGO_ALLOWED_HOSTS: localhost
#      DJANGO_SECRET_KEY: mysecretkey
      # SLCS database
#      DJANGO_DATABASE_DEFAULT_ENGINE: django.db.backends.postgresql
#      DJANGO_DATABASE_DEFAULT_NAME: slcs
#      DJANGO_DATABASE_DEFAULT_HOST: esgf-slcs-postgres
#      DJANGO_DATABASE_DEFAULT_PORT: "5432"
#      DJANGO_DATABASE_DEFAULT_USER: slcsuser
#      DJANGO_DATABASE_DEFAULT_PASSWORD: "Password456"
      # ESGF User database
#      DJANGO_DATABASE_USERDB_ENGINE: django.db.backends.postgresql
#      DJANGO_DATABASE_USERDB_NAME: esgcet
#      DJANGO_DATABASE_USERDB_HOST: esgf-postgres
#      DJANGO_DATABASE_USERDB_PORT: "5432"
#      DJANGO_DATABASE_USERDB_USER: dbsuper
#      DJANGO_DATABASE_USERDB_PASSWORD: "Password123"
      # Other SLCS-specific settings
#      ESGF_SLCS_URL: http://localhost:8000
#      ESGF_SLCS_BASIC_AUTH_REALM: localhost
#      ONLINECA_CERT_SUBJECT_TEMPLATE: /DC=esgf/CN=$$OPENID
#      ONLINECA_CERT_FILEPATH: /opt/onlineca/ca/onlineca.pem
#      ONLINECA_KEY_FILEPATH: /opt/onlineca/ca/onlineca.key
#      ONLINECA_TRUSTROOTS_DIR: /opt/onlineca/ca/trustroots
#    volumes:
#      - "slcs-certificate-authority:/opt/onlineca/ca:ro"
#    depends_on:
#      - esgf-django  # Build dependency
#      - esgf-postgres
#      - esgf-slcs-postgres
#      - esgf-slcs-self-signed-ca


# Use Docker volumes to store persistent data
volumes:
  zk-data:
  zk-datalog:
  solr-home:
  postgres-data:
#  slcs-postgres-data:
#  slcs-certificate-authority:
