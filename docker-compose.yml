# Docker Compose file to start a full ESGF node.
#
# Required env variables:
#
# ESGF_CONFIG : points to the root ESGF configuration directory
#       example: export ESGF_CONFIG=/Users/cinquini/ESGF_CONFIG
# ESGF_HOSTNAME: HostName or IP address for apache httpd front-end server
#       example: export ESGF_HOSTNAME=my.esgf.node
#       example: export ESGF_HOSTNAME=`docker-machine ip`
# ESGF_VERSION: version of ESGF/Docker distribution
#       example: export ESGF_VERSION=1.0
# ESGF_DATA_DIR: root of ESGF data directories

version: '2.1'

networks:
  # network to keep postgres database isolated
  dbnetwork:

services:

  # data container holding site-specific ESGF configuration
  # this container stops after the volumes are initialized
  # only include configuration common to more than one container
  esgf-config:
    image: centos:6
    container_name: esgf-config
    volumes:
     - $ESGF_CONFIG/httpd/certs/:/etc/certs/
     - $ESGF_CONFIG/httpd/conf/esgf-httpd.conf:/etc/httpd/conf.d/esgf-httpd.conf
     - $ESGF_CONFIG/grid-security/certificates/:/etc/grid-security/certificates/
     - $ESGF_CONFIG/esg/config/:/esg/config/
     - $ESGF_CONFIG/esg/config/tomcat/esg-truststore.ts:/usr/java/latest/jre/lib/security/jssecacerts

  # ESGF postgres database
  esgf-postgres:
     image: esgfhub/esgf-postgres:${ESGF_VERSION}
     expose:
       - "5432"
     ports:
       - "5432:5432"
     container_name: postgres
     networks:
       - dbnetwork
     volumes:
       - pg_data:/var/lib/pgsql/data

  # ESGF Data Node
  esgf-data-node:
    image: esgfhub/esgf-data-node:${ESGF_VERSION}
    container_name: data-node
    expose:
      - "8080"
      - "8443"
    # - "8001"
    ports:
      - "8080:8080"
      - "8443:8443"
    # - "8001:8001"
    networks:
      - default
      - dbnetwork 
    volumes:
      - tds_data:/esg/content/thredds
      - $ESGF_CONFIG/webapps/thredds/WEB-INF/web.xml:/usr/local/tomcat/webapps/thredds/WEB-INF/web.xml
      - $ESGF_DATA_DIR:/esg/data
      #- $ESGF_CONFIG/grid-security/certificates/:/etc/grid-security/certificates/
      #- $ESGF_CONFIG/globus/certificate-file:/root/.globus/certificate-file
      - esgf_auth_install:/usr/local/esgf-auth
    volumes_from:
      - esgf-config
    environment:
     - ESGF_HOSTNAME
    depends_on:
      - esgf-postgres


  # ESGF Identity Provider
  esgf-idp-node:
    image: esgfhub/esgf-idp-node:${ESGF_VERSION}
    container_name: idp-node
    expose:
      - "8080"
      - "8443"
    ports:
      - "8082:8080"
      - "8445:8443"
    networks:
      - default
      - dbnetwork
    volumes_from:
      - esgf-config
    depends_on:
      - esgf-postgres

  # Solr engine running within Jetty
  esgf-solr:
    image: esgfhub/esgf-solr:${ESGF_VERSION}
    container_name: solr
    expose:
      - "8983"
      - "8984"
    ports:
      - "8983:8983"
      - "8984:8984" 
    volumes:
      - solr_data:/esg/solr-index
    volumes_from:
      - esgf-config
    networks:
      - default

  # ESGF Index Node
  # note the non-standard ports used on the host
  # (since the standard ports are used by the data-node service)
  esgf-index-node:
    image: esgfhub/esgf-index-node:${ESGF_VERSION}
    container_name: index-node
    expose:
      - "8080"
      - "8443"
    ports:
      - "8081:8080"
      - "8444:8443"
    depends_on:
      - esgf-solr
    volumes_from:
      - esgf-config
    networks:
      - default

  # CoG
  # data container to hold CoG source code and python virtual environment
  # this container stops after the volume 'cog_data' is initialized
  esgf-cog:
     image: esgfhub/esgf-cog:${ESGF_VERSION}
     container_name: cog
     expose:
       - "8000"
     ports:
       - "8000:8000"
     volumes:
       - cog_data:/usr/local/cog/cog_config
     volumes_from:
      - esgf-config
     #command: $ESGF_HOSTNAME true true # ESGF=true, keep django server runnining on port 8000
     command: $ESGF_HOSTNAME true false # ESGF=false, django server running on port 8000 = false
     depends_on:
       - esgf-postgres
     networks:
       - dbnetwork
     environment:
       - COG_DIR=/usr/local/cog
       - COG_INSTALL_DIR=/usr/local/cog/cog_install
       - COG_CONFIG_DIR=/usr/local/cog/cog_config
       - ESGF_HOSTNAME
       # flag to execute CoG initialization, defaults to true, may be overridden from shell environment before starting docker-compose
       - ${INIT:-true}

  esgf-httpd:
   image: esgfhub/esgf-httpd:${ESGF_VERSION}
   container_name: httpd
   entrypoint: /usr/local/bin/docker-entrypoint.sh
   volumes:
     - cog_data:/usr/local/cog/cog_config
     - esgf_auth_install:/usr/local/esgf-auth
     - $ESGF_CONFIG/esgf-auth/settings.py:/usr/local/esgf-auth/src/esgf-auth/esgf_auth/settings.py
     - $ESGF_CONFIG/esgf-auth/db.sqlite3:/tmp/db.sqlite3
   volumes_from:
     - esgf-config
     - esgf-cog
   # - esgf-node-manager
   # - esgf-data-node
   environment:
     - SSL_CERT_DIR=/etc/grid-security/certificates
     - COG_CONFIG_DIR=/usr/local/cog/cog_config
     - ESGF_HOSTNAME
   ports:
     - "80:80"
     - "443:443"
   depends_on:
     - esgf-cog
     - esgf-data-node
   #  - esgf-node-manager
   healthcheck:
     test: 'curl --fail "https://${ESGF_HOSTNAME}/" || exit 1'
   # httpd URLs must use hostname=$ESGF_HOSTNAME
   networks:
     default:
       aliases:
         - "${ESGF_HOSTNAME}"
     dbnetwork: {}

  esgf-node-manager:
   image: esgfhub/esgf-node-manager:${ESGF_VERSION}
   container_name: node-manager
   volumes_from:
     - esgf-config
   environment:
     - SSL_CERT_DIR=/etc/grid-security/certificates
     - ESGF_HOSTNAME
   depends_on:
     - esgf-postgres
   networks:
     default: {}
     dbnetwork: {}

  esgf-slcs:
    command: ["-sn", "$ESGF_HOSTNAME", "-ds", "rootAdmin", "-sdn", "slcs", "-sdh", "slcs-postgres", "-sdu", "dbsuper", "-udn", "esgcet", "-udh", "postgres", "-udu", "dbsuper", "--static-url", "https://$ESGF_HOSTNAME/slcs-static/", "--url-prefix", "slcs", "--use-x-forwarded-host"]
    container_name: esgf-slcs
    depends_on:
      - slcs-postgres
      - slcs-nginx
    expose:
      - "5000"
    image: esgfhub/esgf-slcs:${ESGF_VERSION}
    networks:
      - default
      - dbnetwork
    ports:
      - "5000:5000"
    volumes:
      - slcs_static_web:/var/www/static
      - $ESGF_CONFIG/slcs/conf/db/:/usr/local/esgf-slcs-server/conf/db
      - $ESGF_CONFIG/slcs/conf/ca/:/usr/local/esgf-slcs-server/conf/ca

  slcs-nginx:
    container_name: slcs-nginx
    expose:
      - "443"
      - "80"
    image: nginx
    networks:
      - default
      - dbnetwork
    volumes:
      - "slcs_static_web:/usr/share/nginx/html"
      - "$ESGF_CONFIG/slcs/conf/nginx/nginx.conf:/etc/nginx/conf.d/default.conf"

  slcs-postgres:
    container_name: slcs-postgres
    environment:
      - POSTGRES_PASSWORD=changeit
      - POSTGRES_USER=dbsuper
      - POSTGRES_DB=slcs
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    expose:
      - "5432"
    image: postgres
    networks:
      - default
      - dbnetwork

  # FTP server
  #esgf-ftp:
  # image: esgfhub/esgf-vsftp:${ESGF_VERSION}
  # container_name: ftp 
  # ports:
  #   - "20:20"
  #   - "21:21"
  #   - "12020-12025:12020-12025" 
  # networks:
  #   - default
  # volumes:
  #   - $ESGF_DATA_DIR:/var/ftp/pub
   

# use Docker volumes to store persistent data
# (which survives when the containers are removed)
volumes:
  # postgres data and configuration
  pg_data:
  # cog data directory
  cog_data:
  # contains Solr index data
  solr_data:
  # contains TDS configuration, catalogs, cache, and logs
  # (directory below -Dtds.content.root.path=/esg/content)
  tds_data:
  # static web files for SLCS server
  slcs_static_web:
  # esgf-auth installation directory, including python virtual environment
  esgf_auth_install:
