# Docker Compose file to start a full ESGF node.
#
# Required env variables:
#
# ESGF_CONFIG : points to the root ESGF configuration directory
#       example: export ESGF_CONFIG=/Users/cinquini/ESGF_CONFIG
# ESGF_HOSTNAME: HostName or IP address for apache httpd front-end server
#       example: export ESGF_HOSTNAME=my.esgf.node
#       example: export ESGF_HOSTNAME=`docker-machine ip`
# ESGF_VERSION: version of ESGF/Docker distribution
#       example: export ESGF_VERSION=1.0
# ESGF_DATA_DIR: root of ESGF data directories

version: '3.4'


services:
  esgf-proxy:
    image: cedadev/esgf-proxy
    build: ./proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "$ESGF_CONFIG/certificates/hostcert:/etc/nginx/ssl:ro"
    environment:
      ESGF_HOSTNAME:
      ESGF_SOLR_UPSTREAM: esgf-solr:8983
      ESGF_INDEX_NODE_UPSTREAM: esgf-index-node:8080
      ESGF_TDS_UPSTREAM: esgf-tds:8080
      ESGF_COG_UPSTREAM: esgf-cog:8000
      ESGF_ORP_UPSTREAM: esgf-orp:8080
      ESGF_IDP_UPSTREAM: esgf-idp-node:8080
      ESGF_SLCS_UPSTREAM: esgf-slcs:8000
      ESGF_AUTH_UPSTREAM: esgf-auth:8000
    depends_on:
      - esgf-solr
      - esgf-index-node
      - esgf-tds
      - esgf-orp
      - esgf-idp-node
      - esgf-slcs
#      - esgf-auth
      - esgf-cog

  # Zookeeper is not replicated (yet), but is used to store solr config
  esgf-zookeeper:
    image: "zookeeper:${ZOOKEEPER_VERSION}"
    restart: always
    expose:
      - "2181"
      - "2888"
      - "3888"
    volumes:
      - "zk-data:/data"
      - "zk-datalog:/datalog"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc 127.0.0.1 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 3

  esgf-solr:
    image: cedadev/esgf-solr
    build: ./solr
    restart: always
    environment:
      SOLR_HOME: /esg/solr-home
      SOLR_HEAP: 1g
      ZOOKEEPER_HOST: esgf-zookeeper
    command:
      - "solr-foreground"
      - "-c"
      - "-p"
      - "8983"
      - "-z"
      - "esgf-zookeeper:2181"
      - "-s"
      - "/esg/solr-home"
    volumes:
      - "solr-home:/esg/solr-home"
    depends_on:
      - esgf-zookeeper

  esgf-postgres:
    image: cedadev/esgf-postgres
    build: ./postgres
    restart: always
    environment:
      DBSUPER_PASSWORD_FILE: /esg/secrets/database-password
      ESGCET_PASSWORD_FILE: /esg/secrets/database-publisher-password
    volumes:
      # Mount only the secrets we actually need
      - "$ESGF_CONFIG/secrets/database-password:/esg/secrets/database-password:ro"
      - "$ESGF_CONFIG/secrets/database-publisher-password:/esg/secrets/database-publisher-password:ro"
      - "postgres-data:/var/lib/pgsql/data"

  # Build dependency only
  esgf-configure:
    image: cedadev/esgf-configure
    build: ./configure
    # Use an entrypoint that exits immediately with success
    entrypoint: ["true"]
    # Environment variables required for config files
    # This uses a YAML anchor so that these are easy to reference elsewhere
    environment: &config_env
      ESGF_HOSTNAME:
      ESGF_DATABASE_HOST: esgf-postgres
      ESGF_SOLR_INTERNAL_URL: "http://esgf-solr:8983"

  # Build dependency only
  esgf-tomcat:
    image: cedadev/esgf-tomcat
    build: ./tomcat
    # Use an entrypoint that exits immediately with success
    entrypoint: ["true"]

  # Build dependency only
  esgf-django:
    image: cedadev/esgf-django
    build: ./django
    # Use an entrypoint that exits immediately with success
    entrypoint: ["true"]

  esgf-orp:
    image: cedadev/esgf-orp
    build: ./orp
    restart: always
    environment:
      <<: *config_env
      ESGF_KEYSTORE_FILE: /esg/certificates/esg-hostcert-bundle.p12
      ESGF_KEYSTORE_PASSWORD_FILE: /esg/secrets/java-hostcert-bundle-password
      ESGF_KEYSTORE_ALIAS: "$ESGF_HOSTNAME"
    volumes:
      # Mount only the secrets we actually need
      - "$ESGF_CONFIG/certificates/esg-hostcert-bundle.p12:/esg/certificates/esg-hostcert-bundle.p12:ro"
      - "$ESGF_CONFIG/secrets/java-hostcert-bundle-password:/esg/secrets/java-hostcert-bundle-password:ro"
    depends_on:
      - esgf-configure
      - esgf-tomcat

  esgf-index-node:
    image: cedadev/esgf-index-node
    build: ./index-node
    restart: always
    environment:
      <<: *config_env
    depends_on:
      - esgf-configure
      - esgf-tomcat
      - esgf-solr
      - esgf-orp

  esgf-idp-node:
    image: cedadev/esgf-idp-node
    build: ./idp-node
    restart: always
    environment:
      <<: *config_env
    volumes:
      - "$ESGF_CONFIG/secrets/database-password:/esg/config/.esg_pg_pass:ro"
    depends_on:
      - esgf-configure
      - esgf-tomcat
      - esgf-postgres

  esgf-tds:
    image: cedadev/esgf-tds
    build: ./tds
    environment:
      <<: *config_env
      ESGF_TRUSTSTORE_FILE: /esg/certificates/esg-trust-bundle.jks
      ESGF_TRUSTSTORE_PASSWORD_FILE: /esg/secrets/java-trust-bundle-password
      ESGF_COOKIE_SECRET_KEY_FILE: /esg/secrets/shared-cookie-secret-key
    volumes:
      # Mount only the secrets we actually need
      - "$ESGF_CONFIG/certificates/esg-trust-bundle.jks:/esg/certificates/esg-trust-bundle.jks:ro"
      - "$ESGF_CONFIG/secrets/java-trust-bundle-password:/esg/secrets/java-trust-bundle-password:ro"
      - "$ESGF_CONFIG/secrets/shared-cookie-secret-key:/esg/secrets/shared-cookie-secret-key:ro"
      - "tds-content:/esg/content/thredds"
#      - $ESGF_DATA_DIR:/esg/data
    depends_on:
      - esgf-configure
      - esgf-tomcat
      - esgf-postgres

  esgf-cog:
    image: cedadev/esgf-cog
    build: ./cog
    restart: always
    environment:
      <<: *config_env
      ESGF_COG_TIME_ZONE: "Europe/London"
      ESGF_COG_SECRET_KEY_FILE: /esg/secrets/cog-secret-key
    volumes:
      - "$ESGF_CONFIG/secrets/database-password:/esg/config/.esg_pg_pass:ro"
      - "$ESGF_CONFIG/secrets/rootadmin-password:/esg/config/.esgf_pass:ro"
      - "$ESGF_CONFIG/secrets/cog-secret-key:/esg/secrets/cog-secret-key:ro"
      # Make sure the hostcert is trusted for HTTPS requests
      - "$ESGF_CONFIG/certificates/hostcert/hostcert.crt:/usr/local/share/ca-certificates/hostcert.crt:ro"
    depends_on:
      - esgf-configure
      - esgf-django
      - esgf-postgres

  esgf-slcs-postgres:
    image: "postgres:${SLCS_POSTGRES_VERSION}"
    restart: always
    environment:
      POSTGRES_USER: slcsuser
      POSTGRES_PASSWORD_FILE: /esg/secrets/slcs-database-password
      POSTGRES_DB: slcs
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - "$ESGF_CONFIG/secrets/slcs-database-password:/esg/secrets/slcs-database-password:ro"
      - "slcs-postgres-data:/var/lib/postgresql/data"

  esgf-slcs:
    image: cedadev/esgf-slcs
    build: ./slcs
    restart: "no"
    environment:
      # Generic Django settings
      SCRIPT_NAME: /esgf-slcs
      DJANGO_ALLOWED_HOSTS: $ESGF_HOSTNAME
      DJANGO_SECRET_KEY_FILE: /esg/secrets/slcs-secret-key
      # SLCS database
      DJANGO_DATABASE_DEFAULT_ENGINE: django.db.backends.postgresql
      DJANGO_DATABASE_DEFAULT_NAME: slcs
      DJANGO_DATABASE_DEFAULT_HOST: esgf-slcs-postgres
      DJANGO_DATABASE_DEFAULT_PORT: "5432"
      DJANGO_DATABASE_DEFAULT_USER: slcsuser
      DJANGO_DATABASE_DEFAULT_PASSWORD_FILE: /esg/secrets/slcs-database-password
      # ESGF User database
      DJANGO_DATABASE_USERDB_ENGINE: django.db.backends.postgresql
      DJANGO_DATABASE_USERDB_NAME: esgcet
      DJANGO_DATABASE_USERDB_HOST: esgf-postgres
      DJANGO_DATABASE_USERDB_PORT: "5432"
      DJANGO_DATABASE_USERDB_USER: dbsuper
      DJANGO_DATABASE_USERDB_PASSWORD_FILE: /esg/secrets/database-password
      # Other SLCS-specific settings
      ESGF_SLCS_URL: "https://${ESGF_HOSTNAME}/esgf-slcs"
      ESGF_SLCS_BASIC_AUTH_REALM: $ESGF_HOSTNAME
      ONLINECA_CERT_SUBJECT_TEMPLATE: /DC=esgf/CN=$$OPENID
      ONLINECA_CERT_FILEPATH: /esg/certificates/slcsca/ca.crt
      ONLINECA_KEY_FILEPATH: /esg/certificates/slcsca/ca.key
      ONLINECA_TRUSTROOTS_DIR: /esg/certificates/slcsca/trustroots
    volumes:
      - "$ESGF_CONFIG/secrets/slcs-secret-key:/esg/secrets/slcs-secret-key:ro"
      - "$ESGF_CONFIG/secrets/slcs-database-password:/esg/secrets/slcs-database-password:ro"
      - "$ESGF_CONFIG/secrets/database-password:/esg/secrets/database-password:ro"
      - "$ESGF_CONFIG/certificates/slcsca/ca.crt:/esg/certificates/slcsca/ca.crt:ro"
      - "$ESGF_CONFIG/certificates/slcsca/ca.key:/esg/certificates/slcsca/ca.key:ro"
      # Just mount an empty volume as the trustroots for now
      - "slcs-trustroots:/esg/certificates/slcsca/trustroots/:ro"
    depends_on:
      - esgf-django
      - esgf-postgres
      - esgf-slcs-postgres


# Use Docker volumes to store persistent data
volumes:
  zk-data:
  zk-datalog:
  solr-home:
  postgres-data:
  tds-content:
  slcs-postgres-data:
  slcs-trustroots:
