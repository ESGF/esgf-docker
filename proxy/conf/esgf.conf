# Nginx configuration for the ESGF proxy

server {
    server_name {{ .Env.ESGF_HOSTNAME }};
    listen 80;

    # Unless there is a more specific match, redirect to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }

    proxy_set_header  Host $http_host;
    proxy_set_header  X-Real-IP $remote_addr;
    proxy_set_header  X-Forwarded-Host $http_host;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto $scheme;

    # In order to prevent Nginx aggresively caching IPs, preventing it from picking
    # up restarted services, we use a trick with resolver and variables
    resolver {{ .Env.ESGF_RESOLVER }};

    # Proxy some specific requests that are allowed for plain HTTP
    {{ $solr_upstream := getenv "ESGF_SOLR_UPSTREAM" -}}
    {{ if $solr_upstream -}}
    set $solr_upstream {{ $solr_upstream }};
    location /solr {
        proxy_pass $solr_upstream;
    }
    {{- end }}

    {{ $index_node_upstream := getenv "ESGF_INDEX_NODE_UPSTREAM" -}}
    {{ if $index_node_upstream -}}
    set $index_node_upstream {{ $index_node_upstream }};
    location /esg-search {
        proxy_pass $index_node_upstream;
    }
    {{- end }}

    {{ $tds_upstream := getenv "ESGF_TDS_UPSTREAM" -}}
    {{ if $tds_upstream -}}
    set $tds_upstream {{ $tds_upstream }};
    location /thredds {
        proxy_pass $tds_upstream;
    }
    {{- end }}

}


server {
    server_name {{ .Env.ESGF_HOSTNAME }};
    listen 443 ssl;

    ssl_certificate     {{ getenv "ESGF_PROXY_SSL_CERT_FILE" | default "/etc/nginx/ssl/hostcert.crt" }};
    ssl_certificate_key {{ getenv "ESGF_PROXY_SSL_KEY_FILE" | default "/etc/nginx/ssl/hostcert.key" }};

    # SSL configuration from Mozilla SSL config generator
    # https://mozilla.github.io/server-side-tls/ssl-config-generator/
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Enables server-side protection from BEAST attacks
    # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
    ssl_prefer_server_ciphers on;

    # Disable SSLv3 since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

    ssl_stapling on;
    ssl_stapling_verify on;

    # Enable HSTS (HTTP Strict Transport Security) to avoid ssl stripping
    # https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    # 15768000 seconds = 6 months
    add_header Strict-Transport-Security max-age=15768000;

    # Client certificate verification
    ssl_verify_client optional;
    ssl_client_certificate {{ getenv "ESGF_PROXY_SSL_CLIENT_TRUSTED_CERTS" | default "/esg/certificates/esg-trust-bundle.pem" }};

    proxy_set_header  Host $http_host;
    proxy_set_header  X-Real-IP $remote_addr;
    proxy_set_header  X-Forwarded-Host $http_host;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto $scheme;
    proxy_set_header  SSL_CLIENT_CERT $ssl_client_cert;
    proxy_set_header  SSL_CIPHER $ssl_cipher;
    proxy_set_header  SSL_SESSION_ID $ssl_session_id;

    # In order to prevent Nginx aggresively caching IPs, preventing it from picking
    # up restarted services, we use a trick with resolver and variables
    resolver {{ .Env.ESGF_RESOLVER }};

    # All requests except those with more specific matches go to CoG
    {{ $cog_upstream := getenv "ESGF_COG_UPSTREAM" -}}
    {{ if $cog_upstream -}}
    set $cog_upstream {{ $cog_upstream }};
    location / {
        proxy_pass $cog_upstream;
    }
    {{- end }}

    {{ $solr_upstream := getenv "ESGF_SOLR_UPSTREAM" -}}
    {{ if $solr_upstream -}}
    set $solr_upstream {{ $solr_upstream }};
    location /solr {
        proxy_pass $solr_upstream;
    }
    {{- end }}

    {{ $orp_upstream := getenv "ESGF_ORP_UPSTREAM" -}}
    {{ if $orp_upstream -}}
    set $orp_upstream {{ $orp_upstream }};
    location /esg-orp {
        proxy_pass $orp_upstream;
    }
    {{- end }}

    {{ $idp_upstream := getenv "ESGF_IDP_UPSTREAM" -}}
    {{ if $idp_upstream -}}
    set $idp_upstream {{ $idp_upstream }};
    location /esgf-idp {
        proxy_pass $idp_upstream;
    }
    {{- end }}

    {{ $index_node_upstream := getenv "ESGF_INDEX_NODE_UPSTREAM" -}}
    {{ if $index_node_upstream -}}
    set $index_node_upstream {{ $index_node_upstream }};
    location /esg-search {
        proxy_pass $index_node_upstream;
    }
    {{- end }}

    {{ $tds_upstream := getenv "ESGF_TDS_UPSTREAM" -}}
    {{ if $tds_upstream -}}
    set $tds_upstream {{ $tds_upstream }};
    location /thredds {
        proxy_pass $tds_upstream;
    }
    {{- end }}

    {{ $slcs_upstream := getenv "ESGF_SLCS_UPSTREAM" -}}
    {{ if $slcs_upstream -}}
    set $slcs_upstream {{ $slcs_upstream }};
    location /esgf-slcs {
        proxy_pass $slcs_upstream;
    }
    {{- end }}

    {{ $visus_upstream := getenv "ESGF_VISUS_UPSTREAM" -}}
    {{ if $visus_upstream -}}
    set $visus_upstream {{ $visus_upstream }};
    location /esgf-visus {
        proxy_pass $visus_upstream;
        rewrite ^/esgf-visus(.*)$ $1 last;
    }
    {{- end }}

    {{ $auth_upstream := getenv "ESGF_AUTH_UPSTREAM" -}}
    {{ if $auth_upstream -}}
    set $auth_upstream {{ $auth_upstream }};
    location /esgf-auth {
        proxy_pass $auth_upstream;
    }
    {{- end }}
}
